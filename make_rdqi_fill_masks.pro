FUNCTION make_rdqi_fill_masks, misr_mode, misr_path, misr_orbit, misr_block, $
   misr_camera, misr_band, fill_mask, rdqi_mask, VERSION = version, $
   DEBUG = debug, EXCPT_COND = excpt_cond

   ;Sec-Doc
   ;  PURPOSE: This function returns masks of fill values and RDQI from
   ;  the MISR L1B2 radiance file specified by the input positional
   ;  parameters.
   ;
   ;  ALGORITHM: This function reads the MISR L1B2 radiance file specified
   ;  by the input positional parameters misr_mode, misr_path, misr_orbit,
   ;  misr_block, and misr_camera, and extracts, for the selected
   ;  misr_band, the RDQI and the fill values: pixels obscured by
   ;  topography, not observed by the camera, over the ocean, or unusable
   ;  data (RDQI = 3).
   ;
   ;  SYNTAX: rc = make_rdqi_fill_masks, misr_mode, misr_path, $
   ;  misr_orbit, misr_block, misr_camera, misr_band, fill_mask, $
   ;  rdqi_mask, DEBUG = debug, EXCPT_COND = excpt_cond)
   ;
   ;  POSITIONAL PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   misr_mode {STRING} [I]: The selected MISR MODE.
   ;
   ;  *   misr_path {INTEGER} [I]: The selected MISR PATH number.
   ;
   ;  *   misr_orbit {LONG} [I]: The selected MISR ORBIT number.
   ;
   ;  *   misr_block {INTEGER} [I]: The selected MISR BLOCK number.
   ;
   ;  *   misr_camera {STRING} [I]: The selected MISR CAMERA name.
   ;
   ;  *   misr_band {STRING} [I]: The selected MISR spectral BAND name.
   ;
   ;  *   fill_mask {UNSIGNED INTEGER array} [O]: The mask containing the
   ;      fill values for the selected camera and spectral band.
   ;
   ;  *   rdqi_mask {BYTE array} [O]: The mask containing the RDQI values
   ;      for the selected camera and spectral band.
   ;
   ;  KEYWORD PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   VERSION = version {STRING} [I] (Default value: ’F03_0024’): The
   ;      selected version number of the L1B2 files.
   ;
   ;  *   DEBUG = debug {INT} [I] (Default value: 0): Flag to activate (1)
   ;      or skip (0) debugging tests.
   ;
   ;  *   EXCPT_COND = excpt_cond {STRING} [O] (Default value: ”):
   ;      Description of the exception condition if one has been
   ;      encountered, or a null string otherwise.
   ;
   ;  RETURNED VALUE TYPE: INTEGER.
   ;
   ;  OUTCOME:
   ;
   ;  *   If no exception condition has been detected, this function
   ;      returns 0, and the output keyword parameter excpt_cond is set to
   ;      a null string, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided in the call. The output positional parameters fill_mask
   ;      and rdqi_mask contain the results generated by this function.
   ;
   ;  *   If an exception condition has been detected, this function
   ;      returns a non-zero error code, and the output keyword parameter
   ;      excpt_cond contains a message about the exception condition
   ;      encountered, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided. The output positional parameters fill_mask and
   ;      rdqi_mask may be undefined, inexistent, incomplete or useless.
   ;
   ;  EXCEPTION CONDITIONS:
   ;
   ;  *   Error 100: One or more positional parameter(s) are missing.
   ;
   ;  *   Error 110: Input positional parameter misr_mode is invalid.
   ;
   ;  *   Error 120: Input positional parameter misr_path is invalid.
   ;
   ;  *   Error 130: Input positional parameter misr_orbit is invalid.
   ;
   ;  *   Error 140: Input positional parameter misr_block is invalid.
   ;
   ;  *   Error 150: Input positional parameter misr_camera is invalid.
   ;
   ;  *   Error 160: Input positional parameter misr_band is invalid.
   ;
   ;  *   Error 200: An exception condition occurred in path2str.pro.
   ;
   ;  *   Error 300: An exception condition occurred in the MISR TOOLKIT
   ;      routine
   ;      MTK_MAKE_FILENAME.
   ;
   ;  *   Error 310: An exception condition occurred in the MISR TOOLKIT
   ;      routine
   ;      MTK_SETREGION_BY_PATH_BLOCKRANGE.
   ;
   ;  *   Error 320: An exception condition occurred in the MISR TOOLKIT
   ;      routine
   ;      MTK_READDATA.
   ;
   ;  *   Error 400: The MISR L1B2 file implied by the input arguments to
   ;      this function could not be found, or was found in multiple
   ;      places.
   ;
   ;  DEPENDENCIES:
   ;
   ;  *   MISR Toolkit
   ;
   ;  *   chk_misr_band.pro
   ;
   ;  *   chk_misr_block.pro
   ;
   ;  *   chk_misr_camera.pro
   ;
   ;  *   chk_misr_mode.pro
   ;
   ;  *   chk_misr_orbit.pro
   ;
   ;  *   chk_misr_path.pro
   ;
   ;  *   path2str.pro
   ;
   ;  *   strstr.pro
   ;
   ;  REMARKS: None.
   ;
   ;  EXAMPLES:
   ;
   ;      [Insert the command and its outcome]
   ;
   ;  REFERENCES:
   ;
   ;  *   Mike Bull, Jason Matthews, Duncan McDonald, Alexander Menzies,
   ;      Catherine Moroney, Kevin Mueller, Susan Paradise and Mike
   ;      Smyth (2011) ’Data Products Specifications’, JPL D-13963,
   ;      Revision S, page 71–72, available from
   ;      https://eosweb.larc.nasa.gov/project/misr/DPS_v50_RevS.pdf.
   ;
   ;  VERSIONING:
   ;
   ;  *   2018–08–08: Version 0.9 — Initial release by Linda Hunt.
   ;
   ;  *   2018–08–20: Version 1.0 — Initial public release.
   ;Sec-Lic
   ;  INTELLECTUAL PROPERTY RIGHTS
   ;
   ;  *   Copyright (C) 2017-2018 Michel M. Verstraete.
   ;
   ;      Permission is hereby granted, free of charge, to any person
   ;      obtaining a copy of this software and associated documentation
   ;      files (the “Software”), to deal in the Software without
   ;      restriction, including without limitation the rights to use,
   ;      copy, modify, merge, publish, distribute, sublicense, and/or
   ;      sell copies of the Software, and to permit persons to whom the
   ;      Software is furnished to do so, subject to the following
   ;      conditions:
   ;
   ;      The above copyright notice and this permission notice shall be
   ;      included in all copies or substantial portions of the Software.
   ;
   ;      THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
   ;      EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
   ;      OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   ;      NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   ;      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   ;      WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   ;      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   ;      OTHER DEALINGS IN THE SOFTWARE.
   ;
   ;      See: https://opensource.org/licenses/MIT.
   ;
   ;  *   Feedback
   ;
   ;      Please send comments and suggestions to the author at
   ;      MMVerstraete@gmail.com.
   ;Sec-Cod

   ;  Get the name of this routine:
   info = SCOPE_TRACEBACK(/STRUCTURE)
   rout_name = info[N_ELEMENTS(info) - 1].ROUTINE

   ;  Initialize the default return code and the exception condition message:
   return_code = 0
   excpt_cond = ''

   ;  Set the default values of essential input keyword parameters:
   IF (~KEYWORD_SET(version)) THEN version = 'F03_0024'
   IF (KEYWORD_SET(debug)) THEN debug = 1 ELSE debug = 0

   IF (debug) THEN BEGIN

   ;  Return to the calling routine with an error message if one or more
   ;  positional parameters are missing:
      n_reqs = 8
      IF (N_PARAMS() NE n_reqs) THEN BEGIN
         error_code = 100
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': Routine must be called with ' + strstr(n_reqs) + $
            ' positional parameter(s): misr_mode, misr_path, misr_orbit, ' + $
            'misr_block, misr_camera, misr_band, fill_mask.'
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_mode' is invalid:
      rc = chk_misr_mode(misr_mode, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 110
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_path' is invalid:
      rc = chk_misr_path(misr_path, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 120
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_orbit' is invalid:
      rc = chk_misr_orbit(misr_orbit, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 130
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_block' is invalid:
      rc = chk_misr_block(misr_block, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 140
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_camera' is invalid:
      rc = chk_misr_camera(misr_camera, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 150
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_band' is invalid:
      rc = chk_misr_band(misr_band, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 160
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF
   ENDIF

   ;  Set the MISR specifications:
   ;misr_specs = set_misr_specs()

   ;  Set the standard locations for MISR and MISR-HR files on this computer:
   root_dirs = set_root_dirs()

   ;  Generate the string version of the MISR Path number:
   rc = path2str(misr_path, misr_path_str, DEBUG = debug, $
      EXCPT_COND = excpt_cond)
   IF ((debug) AND (rc NE 0)) THEN BEGIN
      error_code = 200
      excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
         ': ' + excpt_cond
      RETURN, error_code
   ENDIF

   ;  Set the OS path to the L1B2 files:
   path = root_dirs[1] + misr_path_str + PATH_SEP() + 'L1_' + $
      misr_mode + PATH_SEP()
   product = 'GRP_TERRAIN_' + misr_mode

   ;  Set the string equivalents to the Path and Orbit numbers:
   pathstr = STRING(misr_path, FORMAT = '(I03)')
   orbitstr = STRING(misr_orbit, FORMAT = '(I06)')

   ;  Generate the name of the L1B2 file:
   status = MTK_MAKE_FILENAME(path, product, misr_camera, pathstr, $
      orbitstr, version, mfile)
   IF (debug AND (status NE 0)) THEN BEGIN
      error_code = 300
      excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
         ': Status from MTK_MAKE_FILENAME = ' + strstr(status)
      RETURN, error_code
   ENDIF
   misr_file = FILE_SEARCH(mfile, COUNT = count)
   IF (count NE 1) THEN BEGIN
      error_code = 400
      excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
         ': Input file ' + mfile + ' not found or found in multiple places.'
      RETURN, error_code
   ENDIF

   ;  Set the region of interest to the selected Block:
   status = MTK_SETREGION_BY_PATH_BLOCKRANGE(misr_path, $
      misr_block, misr_block, region)
   IF (debug AND (status NE 0)) THEN BEGIN
      error_code = 310
      excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
         ': Status from MTK_SETREGION_BY_PATH_BLOCKRANGE = ' + strstr(status)
      RETURN, error_code
   ENDIF

   ;  Read the L1B2 data file:
   gridname = misr_band + "Band"
   fieldname = misr_band + " Radiance/RDQI"
   status = MTK_READDATA(misr_file, gridname, fieldname, region, radrdq, $
      mapinfo)
   IF (debug AND (status NE 0)) THEN BEGIN
      error_code = 320
      excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
         ': Status from MTK_READDATA = ' + strstr(status)
     RETURN, error_code
   ENDIF

   ;  Remove the RDQI from the radiance data:
   rad = radrdq / 4

   ;  Get the dimensions of the radiance data and generate a fill mask array
   ;  of the same size:
   fill_dims = SIZE(rad, /DIMENSIONS)
   fill_type = SIZE(rad, /TYPE)
   fill_mask = MAKE_ARRAY(DIMENSION = fill_dims, TYPE = fill_type, VALUE = 0)

   ;  Set the codes identifying the pixels obscured by topography, not
   ;  observed by the camera, lying over the ocean and missing or unusable
   ;  due to RDQI = 3:
   obs_fill = 16377U
   edg_fill = 16378U
   oce_fill = 16379U
   bad_fill = 16380U

   ;  Retrieve the location of those pixels in the L1B2 file:
   obsc_loc = WHERE(rad EQ obs_fill, num_obs)
   IF (num_obs GT 0) THEN fill_mask[obsc_loc] = obs_fill
   edge_loc = WHERE(rad EQ edg_fill, num_edg)
   IF (num_edg GT 0) THEN fill_mask[edge_loc] = edg_fill
   ocea_loc = WHERE(rad EQ oce_fill, num_oce)
   IF (num_oce GT 0) THEN fill_mask[ocea_loc] = oce_fill
   miss_loc = WHERE(rad EQ bad_fill, num_bad)
   IF (num_bad GT 0) THEN fill_mask[miss_loc] = bad_fill

   ;  Get the RDQI values from the L1B2 file:
   gridname = misr_band + "Band"
   fieldname = misr_band + " RDQI"
   mtk_status = MTK_READDATA(misr_file, gridname, fieldname, region, radrdq, $
      mapinfo)

   RETURN, return_code

END
